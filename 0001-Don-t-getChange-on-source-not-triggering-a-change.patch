From 91e881172c28b43189de49f5cee6c325617916fa Mon Sep 17 00:00:00 2001
From: Tristan Cacqueray <tdecacqu@redhat.com>
Date: Wed, 30 Nov 2016 06:35:30 +0000
Subject: [PATCH] Don't getChange on source not triggering a change

The current scheduler logic is to try to getChange
from all pipelines source and then skip pipelines which
source fail with ChangeNotFound. Moreover this logic
may fail when the getChange raises another exception.

Address this by adding the trigger_source to the
TriggerEvent object and only process pipelines that
use the same source. Also fixes the ZuulTestCase
configuration to use one event queue per FakeConnections,
even when the server has the same address.

Change-Id: I0597146562be65b12a574e6edd46805b5451fc97
---
 tests/base.py             | 8 ++++----
 zuul/connection/gerrit.py | 1 +
 zuul/model.py             | 1 +
 zuul/scheduler.py         | 7 ++++---
 4 files changed, 10 insertions(+), 7 deletions(-)

diff --git a/tests/base.py b/tests/base.py
index 9dc412b..6ae0222 100755
--- a/tests/base.py
+++ b/tests/base.py
@@ -1115,15 +1115,15 @@ class ZuulTestCase(BaseTestCase):
             if con_driver == 'gerrit':
                 if con_config['server'] not in self.gerrit_changes_dbs.keys():
                     self.gerrit_changes_dbs[con_config['server']] = {}
-                if con_config['server'] not in self.gerrit_queues_dbs.keys():
-                    self.gerrit_queues_dbs[con_config['server']] = \
+                if con_name not in self.gerrit_queues_dbs.keys():
+                    self.gerrit_queues_dbs[con_name] = \
                         Queue.Queue()
                     self.event_queues.append(
-                        self.gerrit_queues_dbs[con_config['server']])
+                        self.gerrit_queues_dbs[con_name])
                 self.connections[con_name] = FakeGerritConnection(
                     con_name, con_config,
                     changes_db=self.gerrit_changes_dbs[con_config['server']],
-                    queues_db=self.gerrit_queues_dbs[con_config['server']],
+                    queues_db=self.gerrit_queues_dbs[con_name],
                     upstream_root=self.upstream_root
                 )
                 setattr(self, 'fake_' + con_name, self.connections[con_name])
diff --git a/zuul/connection/gerrit.py b/zuul/connection/gerrit.py
index 6e8d085..e27a71d 100644
--- a/zuul/connection/gerrit.py
+++ b/zuul/connection/gerrit.py
@@ -59,6 +59,7 @@ class GerritEventConnector(threading.Thread):
         event = TriggerEvent()
         event.type = data.get('type')
         event.trigger_name = 'gerrit'
+        event.trigger_source = self.connection.connection_name
         change = data.get('change')
         if change:
             event.project_name = change.get('project')
diff --git a/zuul/model.py b/zuul/model.py
index b24a06b..c107090 100644
--- a/zuul/model.py
+++ b/zuul/model.py
@@ -1040,6 +1040,7 @@ class TriggerEvent(object):
         self.type = None
         self.project_name = None
         self.trigger_name = None
+        self.trigger_source = None
         # Representation of the user account that performed the event.
         self.account = None
         # patchset-created, comment-added, etc.
diff --git a/zuul/scheduler.py b/zuul/scheduler.py
index 931571f..b90caf8 100644
--- a/zuul/scheduler.py
+++ b/zuul/scheduler.py
@@ -1022,15 +1022,16 @@ class Scheduler(threading.Thread):
             project = self.layout.projects.get(event.project_name)
 
             for pipeline in self.layout.pipelines.values():
+                if (event.trigger_source and event.trigger_source !=
+                        pipeline.source.connection.connection_name):
+                    continue
                 # Get the change even if the project is unknown to us for the
                 # use of updating the cache if there is another change
                 # depending on this foreign one.
                 try:
                     change = pipeline.source.getChange(event, project)
                 except exceptions.ChangeNotFound as e:
-                    self.log.debug("Unable to get change %s from source %s. "
-                                   "(most likely looking for a change from "
-                                   "another connection trigger)",
+                    self.log.error("Unable to get change %s from source %s.",
                                    e.change, pipeline.source)
                     continue
                 if not project or project.foreign:
-- 
2.10.2

