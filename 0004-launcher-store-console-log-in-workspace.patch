From c269eb8440029e091fe3b091c106c7e8d21343d3 Mon Sep 17 00:00:00 2001
From: Tristan Cacqueray <tdecacqu@redhat.com>
Date: Thu, 11 May 2017 05:25:02 +0000
Subject: [PATCH 4/7] launcher: store console log in workspace

This change modifies ansible libraries to support a custom
console log path in order to prevent using insecure /tmp location.

Change-Id: I5901f0d8ed73ef8dcaebeeacddccbc69d72b12e0
---
 zuul/ansible/library/command.py      | 19 ++++++++-----
 zuul/ansible/library/zuul_log.py     | 12 ++++++---
 zuul/launcher/ansiblelaunchserver.py | 52 +++++++++++++++++++++---------------
 3 files changed, 50 insertions(+), 33 deletions(-)
 mode change 100644 => 100755 zuul/ansible/library/command.py
 mode change 100644 => 100755 zuul/ansible/library/zuul_log.py

diff --git a/zuul/ansible/library/command.py b/zuul/ansible/library/command.py
old mode 100644
new mode 100755
index 6390322..19f7911
--- a/zuul/ansible/library/command.py
+++ b/zuul/ansible/library/command.py
@@ -125,8 +125,11 @@ PASSWD_ARG_RE = re.compile(r'^[-]{0,2}pass[-]?(word|wd)?')
 
 
 class Console(object):
+    def __init__(self, path):
+        self.path = path
+
     def __enter__(self):
-        self.logfile = open('/tmp/console.html', 'a', 0)
+        self.logfile = open(self.path, 'a', 0)
         return self
 
     def __exit__(self, etype, value, tb):
@@ -142,9 +145,9 @@ class Console(object):
         self.logfile.write(outln)
 
 
-def follow(fd):
+def follow(fd, console_path):
     newline_warning = False
-    with Console() as console:
+    with Console(console_path) as console:
         while True:
             line = fd.readline()
             if not line:
@@ -159,7 +162,7 @@ def follow(fd):
 
 # Taken from ansible/module_utils/basic.py ... forking the method for now
 # so that we can dive in and figure out how to make appropriate hook points
-def zuul_run_command(self, args, check_rc=False, close_fds=True, executable=None, data=None, binary_data=False, path_prefix=None, cwd=None, use_unsafe_shell=False, prompt_regex=None, environ_update=None):
+def zuul_run_command(self, args, check_rc=False, close_fds=True, executable=None, data=None, binary_data=False, path_prefix=None, cwd=None, use_unsafe_shell=False, prompt_regex=None, environ_update=None, console_path=None):
     '''
     Execute a command, returns rc, stdout, and stderr.
 
@@ -308,7 +311,7 @@ def zuul_run_command(self, args, check_rc=False, close_fds=True, executable=None
             self.log('Executing: ' + running)
         # ZUUL: Replaced the excution loop with the zuul_runner run function
         cmd = subprocess.Popen(args, **kwargs)
-        t = threading.Thread(target=follow, args=(cmd.stdout,))
+        t = threading.Thread(target=follow, args=(cmd.stdout, console_path,))
         t.daemon = True
         t.start()
         ret = cmd.wait()
@@ -317,7 +320,7 @@ def zuul_run_command(self, args, check_rc=False, close_fds=True, executable=None
         # likely stuck in readline() because it spawed a child that is
         # holding stdout or stderr open.
         t.join(10)
-        with Console() as console:
+        with Console(console_path) as console:
             if t.isAlive():
                 console.addLine("[Zuul] standard output/error still open "
                                 "after child exited")
@@ -392,6 +395,7 @@ def main():
           removes = dict(type='path'),
           warn = dict(type='bool', default=True),
           environ = dict(type='dict', default=None),
+          console_path = dict(type='path', default="/tmp/console.html"),
         )
     )
 
@@ -403,6 +407,7 @@ def main():
     removes  = module.params['removes']
     warn = module.params['warn']
     environ = module.params['environ']
+    console_path = module.params['console_path']
 
     if args.strip() == '':
         module.fail_json(rc=256, msg="no command given")
@@ -443,7 +448,7 @@ def main():
         args = shlex.split(args)
     startd = datetime.datetime.now()
 
-    rc, out, err = zuul_run_command(module, args, executable=executable, use_unsafe_shell=shell, environ_update=environ)
+    rc, out, err = zuul_run_command(module, args, executable=executable, use_unsafe_shell=shell, environ_update=environ, console_path=console_path)
 
     endd = datetime.datetime.now()
     delta = endd - startd
diff --git a/zuul/ansible/library/zuul_log.py b/zuul/ansible/library/zuul_log.py
old mode 100644
new mode 100755
index 4b377d9..ad7d6d4
--- a/zuul/ansible/library/zuul_log.py
+++ b/zuul/ansible/library/zuul_log.py
@@ -20,8 +20,11 @@ import datetime
 
 
 class Console(object):
+    def __init__(self, path):
+        self.path = path
+
     def __enter__(self):
-        self.logfile = open('/tmp/console.html', 'a', 0)
+        self.logfile = open(self.path, 'a', 0)
         return self
 
     def __exit__(self, etype, value, tb):
@@ -33,10 +36,10 @@ class Console(object):
         self.logfile.write(outln)
 
 
-def log(msg):
+def log(msg, path):
     if not isinstance(msg, list):
         msg = [msg]
-    with Console() as console:
+    with Console(path) as console:
         for line in msg:
             console.addLine("[Zuul] %s\n" % line)
 
@@ -45,11 +48,12 @@ def main():
     module = AnsibleModule(
         argument_spec=dict(
             msg=dict(required=True, type='raw'),
+            path=dict(default='/tmp/console.html'),
         )
     )
 
     p = module.params
-    log(p['msg'])
+    log(p['msg'], p['path'])
     module.exit_json(changed=True)
 
 from ansible.module_utils.basic import *  # noqa
diff --git a/zuul/launcher/ansiblelaunchserver.py b/zuul/launcher/ansiblelaunchserver.py
index 36da983..01f305a 100644
--- a/zuul/launcher/ansiblelaunchserver.py
+++ b/zuul/launcher/ansiblelaunchserver.py
@@ -991,7 +991,7 @@ class NodeWorker(object):
                       '--prune-empty-dirs']
         return rsync_opts
 
-    def _makeSCPTask(self, jobdir, publisher, parameters):
+    def _makeSCPTask(self, jobdir, publisher, parameters, console_path):
         tasks = []
         for scpfile in publisher['scp']['files']:
             scproot = tempfile.mkdtemp(dir=jobdir.staging_root)
@@ -1011,8 +1011,10 @@ class NodeWorker(object):
                 tasks.append(task)
 
                 # Fetch the console log from the remote host.
-                src = '/tmp/console.html'
-                rsync_opts = []
+                syncargs = dict(src=console_path,
+                                dest=os.path.join(scproot, 'console.html'),
+                                copy_links='yes',
+                                mode='pull')
             else:
                 src = parameters['WORKSPACE']
                 if not src.endswith('/'):
@@ -1020,12 +1022,12 @@ class NodeWorker(object):
                 rsync_opts = self._getRsyncOptions(scpfile['source'],
                                                    parameters)
 
-            syncargs = dict(src=src,
-                            dest=scproot,
-                            copy_links='yes',
-                            mode='pull')
-            if rsync_opts:
-                syncargs['rsync_opts'] = rsync_opts
+                syncargs = dict(src=src,
+                                dest=scproot,
+                                copy_links='yes',
+                                mode='pull',
+                                rsync_opts=rsync_opts)
+
             task = dict(name='copy files from node',
                         synchronize=syncargs)
             if not scpfile.get('copy-after-failure'):
@@ -1198,7 +1200,8 @@ class NodeWorker(object):
 
         return tasks
 
-    def _makeBuilderTask(self, jobdir, builder, parameters, sequence):
+    def _makeBuilderTask(self, jobdir, builder, parameters, sequence,
+                         console_path):
         tasks = []
         script_fn = '%02d-%s.sh' % (sequence, str(uuid.uuid4().hex))
         script_path = os.path.join(jobdir.script_root, script_fn)
@@ -1218,7 +1221,8 @@ class NodeWorker(object):
         task = dict(command=remote_path)
         task['name'] = 'command generated from JJB'
         task['environment'] = "{{ zuul.environment }}"
-        task['args'] = dict(chdir=parameters['WORKSPACE'])
+        task['args'] = dict(chdir=parameters['WORKSPACE'],
+                            console_path=console_path)
         tasks.append(task)
 
         filetask = dict(path=remote_path,
@@ -1260,6 +1264,7 @@ class NodeWorker(object):
 
         parameters = args.copy()
         parameters['WORKSPACE'] = os.path.join(self.workspace_root, job_name)
+        console_path = os.path.join(parameters['WORKSPACE'], '.console.html')
 
         with open(jobdir.inventory, 'w') as inventory:
             for host_name, host_vars in self.getHostList():
@@ -1299,22 +1304,21 @@ class NodeWorker(object):
             tasks = []
             tasks.append(dict(shell=shellargs, delegate_to='127.0.0.1'))
 
-            task = dict(file=dict(path='/tmp/console.html', state='absent'))
-            tasks.append(task)
-
-            task = dict(zuul_console=dict(path='/tmp/console.html',
-                                          port=19885))
+            task = dict(file=dict(path=console_path, state='absent'))
             tasks.append(task)
 
             task = dict(file=dict(path=parameters['WORKSPACE'],
                                   state='directory'))
             tasks.append(task)
 
+            task = dict(zuul_console=dict(path=console_path, port=19885))
+            tasks.append(task)
+
             msg = [
                 "Launched by %s" % self.manager_name,
                 "Building remotely on %s in workspace %s" % (
                     self.name, parameters['WORKSPACE'])]
-            task = dict(zuul_log=dict(msg=msg))
+            task = dict(zuul_log=dict(msg=msg, path=console_path))
             tasks.append(task)
 
             play = dict(hosts='node', name='Job setup', tasks=tasks)
@@ -1330,7 +1334,7 @@ class NodeWorker(object):
                     sequence += 1
                     tasks.extend(
                         self._makeBuilderTask(jobdir, builder, parameters,
-                                              sequence))
+                                              sequence, console_path))
 
             play = dict(hosts='node', name='Job body', tasks=tasks)
             playbook.write(yaml.safe_dump([play], default_flow_style=False))
@@ -1344,7 +1348,8 @@ class NodeWorker(object):
                 for publisher in publishers:
                     if 'scp' in publisher:
                         block.extend(self._makeSCPTask(jobdir, publisher,
-                                                       parameters))
+                                                       parameters,
+                                                       console_path))
                     if 'ftp' in publisher:
                         block.extend(self._makeFTPTask(jobdir, publisher,
                                                        parameters))
@@ -1359,13 +1364,16 @@ class NodeWorker(object):
             # of the publishers succeed.
             tasks = []
 
-            task = dict(zuul_log=dict(msg="Job complete, result: SUCCESS"),
+            task = dict(zuul_log=dict(msg="Job complete, result: SUCCESS",
+                                      path=console_path),
                         when='success|bool')
             blocks[0].insert(0, task)
-            task = dict(zuul_log=dict(msg="Job complete, result: FAILURE"),
+            task = dict(zuul_log=dict(msg="Job complete, result: FAILURE",
+                                      path=console_path),
                         when='not success|bool and not timedout|bool')
             blocks[0].insert(0, task)
-            task = dict(zuul_log=dict(msg="Job timed out, result: FAILURE"),
+            task = dict(zuul_log=dict(msg="Job timed out, result: FAILURE",
+                                      path=console_path),
                         when='not success|bool and timedout|bool')
             blocks[0].insert(0, task)
 
-- 
2.10.2

