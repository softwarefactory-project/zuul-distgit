From 0446345f6d250398232d58c51f8938844dad9cfd Mon Sep 17 00:00:00 2001
From: Tristan Cacqueray <tdecacqu@redhat.com>
Date: Sun, 14 May 2017 01:12:17 +0000
Subject: [PATCH] launcher: add results_dir option

This change adds a new results_dir option to instruct the launcher
to store console log like Jenkins. This provides a convenient
overview of executed jobs, in particular for post and periodic pipelines.

Change-Id: I2a7456918e179a9eb1cd8b136cc0b3bfdd84654e
---
 zuul/launcher/ansiblelaunchserver.py | 30 ++++++++++++++++++++++++++++++
 1 file changed, 30 insertions(+)

diff --git a/zuul/launcher/ansiblelaunchserver.py b/zuul/launcher/ansiblelaunchserver.py
index 834ed62..3a61b6c 100644
--- a/zuul/launcher/ansiblelaunchserver.py
+++ b/zuul/launcher/ansiblelaunchserver.py
@@ -622,6 +622,10 @@ class NodeWorker(object):
         self.library_dir = library_dir
         self.pre_post_library_dir = pre_post_library_dir
         self.options = options
+        if self.config.has_option('launcher', 'results_dir'):
+            self.results_dir = config.get('launcher', 'results_dir')
+        else:
+            self.results_dir = None
 
     def isAlive(self):
         # Meant to be called from the manager
@@ -1378,6 +1382,32 @@ class NodeWorker(object):
                         when='console_pid_file.stat.exists')
             tasks.append(task)
 
+            if self.results_dir:
+                result_dir = "%s/%s" % (
+                    self.results_dir,
+                    job_name,
+                )
+                job_dir = "%s/%s-%s,%s-%s-%s" % (
+                    result_dir,
+                    parameters.get("ZUUL_PROJECT"),
+                    parameters.get("ZUUL_CHANGE", "0"),
+                    parameters.get("ZUUL_PATCHSET", "0"),
+                    parameters.get("ZUUL_PIPELINE"),
+                    parameters.get("ZUUL_UUID"),
+                )
+                task = dict(file=dict(path=job_dir,
+                                      state="directory"))
+                tasks.append(task)
+                task = dict(copy=dict(src=console_path,
+                                      dest="%s/console.html" % job_dir,
+                                      remote_src=True))
+                tasks.append(task)
+                task = dict(file=dict(path="%s/lastSuccessful" % result_dir,
+                                      src="%s/console.html" % job_dir,
+                                      state="link"),
+                            when='success|bool')
+                tasks.append(task)
+
             play = dict(hosts='node', name='Publishers',
                         tasks=tasks)
             playbook.write(yaml.safe_dump([play], default_flow_style=False))
-- 
2.10.2

