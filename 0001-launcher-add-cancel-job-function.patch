From dc38311e555b15e63eb7fc4b5e274d99189c6fbb Mon Sep 17 00:00:00 2001
From: Tristan Cacqueray <tdecacqu@redhat.com>
Date: Thu, 7 Sep 2017 06:31:56 +0000
Subject: [PATCH] launcher: add cancel job function

This new gearman function let admin cancel a job.

Change-Id: Id1d2739b9804f6d0cc1aee5bc4b6925ab2a410a1
---
 zuul/launcher/ansiblelaunchserver.py | 22 ++++++++++++++++++++--
 1 file changed, 20 insertions(+), 2 deletions(-)

diff --git a/zuul/launcher/ansiblelaunchserver.py b/zuul/launcher/ansiblelaunchserver.py
index 4bc231cd..dce64f93 100644
--- a/zuul/launcher/ansiblelaunchserver.py
+++ b/zuul/launcher/ansiblelaunchserver.py
@@ -340,6 +340,7 @@ class LaunchServer(object):
         if self.accept_nodes:
             new_functions.add("node_assign:zuul")
         new_functions.add("stop:%s" % self.hostname)
+        new_functions.add("cancel:%s" % self.hostname)
         new_functions.add("set_description:%s" % self.hostname)
         new_functions.add("node_revoke:%s" % self.hostname)
 
@@ -481,6 +482,9 @@ class LaunchServer(object):
                     elif job.name.startswith('stop:'):
                         self.log.debug("Got stop job: %s" % job.unique)
                         self.stopJob(job)
+                    elif job.name.startswith('cancel:'):
+                        self.log.info("Got cancel job: %s" % job.unique)
+                        self.cancelJob(job)
                     elif job.name.startswith('set_description:'):
                         self.log.debug("Got set_description job: %s" %
                                        job.unique)
@@ -541,7 +545,7 @@ class LaunchServer(object):
         finally:
             job.sendWorkComplete()
 
-    def stopJob(self, job):
+    def stopJob(self, job, action='abort'):
         try:
             args = json.loads(job.arguments)
             self.log.debug("Stop job with arguments: %s" % (args,))
@@ -556,7 +560,7 @@ class LaunchServer(object):
                 return
             try:
                 if node.isAlive():
-                    node.queue.put(dict(action='abort'))
+                    node.queue.put(dict(action=action))
                 else:
                     self.log.debug("Node %s is not alive while aborting job" %
                                    (node.name,))
@@ -566,6 +570,9 @@ class LaunchServer(object):
         finally:
             job.sendWorkComplete()
 
+    def cancelJob(self, job):
+        self.stopJob(job, action='cancel')
+
     def runReaper(self):
         # We don't actually care if all the events are processed
         while self._reaper_running:
@@ -737,6 +744,10 @@ class NodeWorker(object):
             elif item['action'] == 'abort':
                 self.log.debug("Received abort request")
                 self.abortRunningJob()
+            elif item['action'] == 'cancel':
+                self.log.debug("Received cancel request")
+                self._canceled_job = True
+                self.abortRunningJob()
         finally:
             self.queue.task_done()
 
@@ -844,6 +855,7 @@ class NodeWorker(object):
         result = None
         self._sent_complete_event = False
         self._aborted_job = False
+        self._canceled_job = False
         self._watchdog_timeout = False
 
         try:
@@ -941,18 +953,24 @@ class NodeWorker(object):
             job.sendWorkStatus(0, 100)
 
             pre_status = self.runAnsiblePrePlaybook(jobdir)
+            if self._canceled_job:
+                return 'CANCELED'
             if pre_status is None:
                 # These should really never fail, so return None and have
                 # zuul try again
                 return result
 
             job_status = self.runAnsiblePlaybook(jobdir, timeout)
+            if self._canceled_job:
+                return 'CANCELED'
             if job_status is None:
                 # The result of the job is indeterminate.  Zuul will
                 # run it again.
                 return result
 
             post_status = self.runAnsiblePostPlaybook(jobdir, job_status)
+            if self._canceled_job:
+                return 'CANCELED'
             if not post_status:
                 result = 'POST_FAILURE'
             elif job_status:
-- 
2.13.0

