From 8b353f3257d303a2e3a64b7f4796c7ed1ec414b8 Mon Sep 17 00:00:00 2001
From: Tristan Cacqueray <tdecacqu@redhat.com>
Date: Mon, 22 May 2017 02:36:48 +0000
Subject: [PATCH] launcher: add Jenkins credentials-binding support

This change adds support for credentials-binding wrappers.

Change-Id: I6cee11bc389c6f130a1dfda7625f74c8eb8807da
---

diff --git a/requirements.txt b/requirements.txt
index 963c899..9777d4b 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -17,3 +17,4 @@
 six>=1.6.0
 sqlalchemy
 alembic
+cryptography
diff --git a/zuul/launcher/ansiblelaunchserver.py b/zuul/launcher/ansiblelaunchserver.py
index 169a4d0..ca6a732 100644
--- a/zuul/launcher/ansiblelaunchserver.py
+++ b/zuul/launcher/ansiblelaunchserver.py
@@ -35,6 +35,7 @@
 
 import zuul.ansible.library
 from zuul.lib import commandsocket
+from zuul.lib import jenkins
 
 ANSIBLE_WATCHDOG_GRACE = 5 * 60
 ANSIBLE_DEFAULT_TIMEOUT = 2 * 60 * 60
@@ -176,6 +177,12 @@
         else:
             self.accept_nodes = True
         self.config_accept_nodes = self.accept_nodes
+
+        if self.config.has_option('launcher', 'jenkins_secrets'):
+            self.secrets = jenkins.decrypt(self.config.get('launcher',
+                                                           'jenkins_secrets'))
+        else:
+            self.secrets = {}
 
         if self.config.has_option('zuul', 'state_dir'):
             state_dir = os.path.expanduser(
@@ -491,7 +498,7 @@
                             self.hostname, self.zmq_send_queue,
                             self.termination_queue, self.keep_jobdir,
                             self.library_dir, self.pre_post_library_dir,
-                            self.options)
+                            self.options, self.secrets)
         self.node_workers[worker.name] = worker
 
         worker.thread = threading.Thread(target=worker.run)
@@ -572,13 +579,14 @@
     def __init__(self, config, jobs, builds, sites, name, host,
                  description, labels, manager_name, zmq_send_queue,
                  termination_queue, keep_jobdir, library_dir,
-                 pre_post_library_dir, options):
+                 pre_post_library_dir, options, secrets):
         self.log = logging.getLogger("zuul.NodeWorker.%s" % (name,))
         self.log.debug("Creating node worker %s" % (name,))
         self.config = config
         self.jobs = jobs
         self.builds = builds
         self.sites = sites
+        self.secrets = secrets
         self.name = name
         self.host = host
         self.description = description
@@ -1185,7 +1193,7 @@
         return tasks
 
     def _makeBuilderTask(self, jobdir, builder, parameters, sequence,
-                         console_path):
+                         env, console_path):
         tasks = []
         script_fn = '%02d-%s.sh' % (sequence, str(uuid.uuid4().hex))
         script_path = os.path.join(jobdir.script_root, script_fn)
@@ -1204,7 +1212,7 @@
 
         task = dict(command=remote_path)
         task['name'] = 'command generated from JJB'
-        task['environment'] = "{{ zuul.environment }}"
+        task['environment'] = env
         task['args'] = dict(chdir=parameters['WORKSPACE'],
                             console_path=console_path)
         tasks.append(task)
@@ -1213,6 +1221,50 @@
                         state='absent')
         task = dict(file=filetask)
         tasks.append(task)
+
+        return tasks
+
+    def _makeSecretTask(self, jobdir, wrapper, parameters, env, post_tasks):
+        tasks = []
+        secrets_path = os.path.join(jobdir.root, "secrets")
+        if not os.path.isdir(secrets_path):
+            os.mkdir(secrets_path, 0o700)
+
+        for binding in wrapper["credentials-binding"]:
+            if 'text' in binding:
+                secret = self.secrets[binding['text']['credential-id']]
+                env[binding['text']['variable']] = secret['secret']
+                self.used_secrets.append(secret['secret'])
+            elif 'file' in binding:
+                # Write secret locally
+                secret = self.secrets[binding['file']['credential-id']]
+                secret_path = os.path.join(secrets_path,
+                                           secret['fileName'])
+                with open(secret_path, 'wb') as secret_file:
+                    secret_file.write(secret["content"])
+
+                # Copy secret to slave
+                if secret['fileName'][0] != '.':
+                    secret['fileName'] = ".%s" % secret['fileName']
+                remote_path = os.path.join(parameters['WORKSPACE'],
+                                           secret['fileName'])
+                copy = dict(src=secret_path,
+                            dest=remote_path)
+                task = dict(copy=copy)
+                tasks.append(task)
+
+                # Ensure secret is removed
+                filetask = dict(path=remote_path,
+                                state='absent')
+                task = dict(file=filetask)
+                post_tasks.append(task)
+                filetask = dict(path=secret_path,
+                                state='absent')
+                task = dict(file=filetask,
+                            delegate_to='127.0.0.1')
+                post_tasks.append(task)
+
+                env[binding['file']['variable']] = remote_path
 
         return tasks
 
@@ -1313,15 +1365,31 @@
 
         with open(jobdir.playbook, 'w') as playbook:
             tasks = []
+            post_tasks = []
 
+            env = {}
+            self.used_secrets = []
+            for wrapper in jjb_job.get('wrappers', []):
+                if 'credentials-binding' in wrapper:
+                    tasks.extend(
+                        self._makeSecretTask(jobdir, wrapper, parameters,
+                                             env, post_tasks))
+            env.update(parameters)
             sequence = 0
             for builder in jjb_job.get('builders', []):
                 if 'shell' in builder:
                     sequence += 1
                     tasks.extend(
                         self._makeBuilderTask(jobdir, builder, parameters,
-                                              sequence, console_path))
+                                              sequence, env, console_path))
 
+            if post_tasks:
+                tasks.extend(post_tasks)
+                # Also ensure post_tasks are executed if block failed
+                post_tasks.append(dict(fail=dict(msg='FAILURE')))
+                for task in tasks:
+                    if "always" in task:
+                        task["rescue"] = post_tasks
             play = dict(hosts='node', name='Job body', tasks=tasks)
             playbook.write(yaml.safe_dump([play], default_flow_style=False))
 
@@ -1516,6 +1584,15 @@
         else:
             verbose = '-v'
 
+        # Remove secrets from playbook
+        if self.used_secrets:
+            with open(jobdir.playbook, 'r') as playbook:
+                playbook_content = playbook.read()
+            with open(jobdir.playbook, 'w') as playbook:
+                for secret in self.used_secrets:
+                    playbook_content = playbook_content.replace(secret, 'XXXX')
+                playbook.write(playbook_content)
+
         cmd = ['ansible-playbook', jobdir.post_playbook,
                '-e', 'success=%s' % success,
                '-e', 'timedout=%s' % self._watchdog_timeout,
diff --git a/zuul/lib/jenkins.py b/zuul/lib/jenkins.py
new file mode 100644
index 0000000..623b837
--- /dev/null
+++ b/zuul/lib/jenkins.py
@@ -0,0 +1,101 @@
+# -*- coding: utf-8 -*-
+# Copyright 2017 Red Hat
+#
+# Licensed under the Apache License, Version 2.0 (the "License"); you may
+# not use this file except in compliance with the License. You may obtain
+# a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+# License for the specific language governing permissions and limitations
+# under the License.
+
+# Decrypt jenkins secrets
+# Inspired from http://thi√©baud.fr/jenkins_credentials.html
+
+import base64
+import os
+import xml.dom.minidom
+
+from hashlib import sha256
+from Crypto.Cipher import AES
+
+
+def decrypt(jenkins_dir):
+    def read(path):
+        return open(os.path.join(jenkins_dir, path), "rb").read()
+    try:
+        master_key = read("secrets/master.key")
+        hudson_file = read("secrets/hudson.util.Secret")
+        file_file = read("secrets/org.jenkinsci.plugins.plaincredentials."
+                         "impl.FileCredentialsImpl")
+        credencial = read("credentials.xml")
+    except OSError:
+        raise RuntimeError("Couldn't read jenkins files")
+
+    text_key = AES.new(sha256(master_key).digest()[:16], AES.MODE_ECB).decrypt(
+        hudson_file)[:16]
+    file_key = AES.new(sha256(master_key).digest()[:16], AES.MODE_ECB).decrypt(
+        file_file)[:16]
+
+    creds = xml.dom.minidom.parseString(credencial).getElementsByTagName(
+        "java.util.concurrent.CopyOnWriteArrayList")[0]
+    secrets = {}
+
+    for node in creds.childNodes:
+        if node.nodeType == node.TEXT_NODE:
+            continue
+
+        def get(tag):
+            try:
+                child = node.getElementsByTagName(tag)[0].firstChild
+                if child is None:
+                    return ""
+                return child.data
+            except:
+                print("Couldn't decode %s" % node.toxml())
+                raise
+
+        def decrypt(tag, key=text_key):
+            data = AES.new(key, AES.MODE_ECB).decrypt(
+                base64.b64decode(get(tag)))
+            if b"::::MAGIC::::" in data:
+                data = data[:data.index(b"::::MAGIC::::")]
+            # Jenkins uses a weird padding for file, remove it from known type
+            elif b"\x00\x00" in data[-32:]:
+                # Tarball padding
+                data = data[:data.rindex(b"\x00\x00") + 2]
+            elif b"\x0a" in data[-32:]:
+                # Textfile padding
+                data = data[:data.rindex(b"\x0a") + 1]
+            return data
+
+        secret_id = get("id")
+        secret = {
+            "description": get("description"),
+            "type": node.tagName.split(".")[-1],
+        }
+        if secret_id in secrets:
+            raise RuntimeError("Secret id %s already defined" % secret_id)
+        if secret["type"] == "StringCredentialsImpl":
+            secret["secret"] = decrypt("secret").decode('utf-8')
+        elif secret["type"] == "BasicSSHUserPrivateKey":
+            # Skipping ssh private key
+            pass
+        elif secret["type"] == "FileCredentialsImpl":
+            secret["fileName"] = get("fileName")
+            secret["content"] = decrypt("data", key=file_key)
+        elif secret["type"] == "UsernamePasswordCredentialsImpl":
+            secret["username"] = get("username")
+            secret["password"] = decrypt("password").decode('utf-8')
+        else:
+            raise RuntimeError("Unknown secret type %s" % node.toxml())
+        secrets[secret_id] = secret
+    return secrets
+
+
+if __name__ == "__main__":
+    print(decrypt("/var/lib/jenkins"))
