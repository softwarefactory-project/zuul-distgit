From 3b3899c2a6ab68e81811b3d4eb78315d1016d59a Mon Sep 17 00:00:00 2001
From: Tristan Cacqueray <tdecacqu@redhat.com>
Date: Tue, 16 May 2017 01:49:05 +0000
Subject: [PATCH 6/7] launcher: add simple email publisher

Change-Id: I9da74ca152498208f3692972b1a9f7dcbe41b816
---
 zuul/launcher/ansiblelaunchserver.py | 29 +++++++++++++++++++++++++++++
 1 file changed, 29 insertions(+)

diff --git a/zuul/launcher/ansiblelaunchserver.py b/zuul/launcher/ansiblelaunchserver.py
index 5c93935..4ba4188 100644
--- a/zuul/launcher/ansiblelaunchserver.py
+++ b/zuul/launcher/ansiblelaunchserver.py
@@ -1084,6 +1084,32 @@ class NodeWorker(object):
 
         return task
 
+    def _makeEmailTask(self, jobdir, publisher, parameters, job_name):
+        url = "unknown"
+        if self.config.has_option("zuul", "url_pattern"):
+            class _Build:
+                def __init__(self, parameters):
+                    self.parameters = parameters
+            try:
+                url = self.config.get("zuul", "url_pattern").format(
+                    build=_Build(parameters))
+            except:
+                self.log.exception("Exception formatting url_pattern")
+        mailargs = dict(
+            to=",".join(publisher["email"].get("recipients", "root").split()),
+            subject="Build failed in zuul-launcher: %s #%s" % (
+                job_name,
+                parameters.get("ZUUL_UUID")),
+            body="Logs url: %s" % url,
+            headers="X-Zuul-Job=%s" % job_name,
+        )
+        mailargs["from"] = "zuul"
+        task = dict(name='Send email',
+                    mail=mailargs,
+                    when='not success|bool',
+                    delegate_to='127.0.0.1')
+        return [task]
+
     def _makeFTPTask(self, jobdir, publisher, parameters):
         tasks = []
         ftp = publisher['ftp']
@@ -1356,6 +1382,9 @@ class NodeWorker(object):
                     if 'afs' in publisher:
                         block.extend(self._makeAFSTask(jobdir, publisher,
                                                        parameters))
+                    if 'email' in publisher:
+                        block.extend(self._makeEmailTask(jobdir, publisher,
+                                                         parameters, job_name))
                 blocks.append(block)
 
             # The 'always' section contains the log publishing tasks,
-- 
2.10.2

